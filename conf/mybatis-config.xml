<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- myBatis框架的全局配置文件 -->
<configuration>
    <!--
        1.properties: MyBatis使用properties来引入外部的.properties类型的配置文件
            resource: 引入类路径下的资源
            url: 引入网络路基或者是磁盘路径下的资源
     -->
    <properties resource="db.properties"></properties>

    <!--
       2.settings:包含了很多重要的设置项。
           setting:用来配置每一个设置项.
               name: 设置项的名字
               value:设置项的取值

     -->
    <settings>
        <!-- 映射下划线命名到驼峰命名  例如: last_name to  lastName  -->
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <!-- 开启全局延迟加载功能 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 开启被关联对象的属性的延迟加载功能 -->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 开启全局的二级缓存  -->
        <setting name="cacheEnabled" value="true"/>
    </settings>


    <!--
        3.typeAliases:别名处理
            typeAlias: 给某个java类型取别名
                type:指定java的类型
                alias:指定别名,如果不指定，默认的别名是类名首字母小写. 别名不区分大小写.
            package: 批量取别名
                               为指定的包以及子包下的类取默认别名.
                               如果遇到有冲突的类名时，可以使用@Alias("")来指定具体的别名
     -->
    <typeAliases>
        <!-- <typeAlias type="com.atguigu.mybaits.beans.Employee" alias="employee" /> -->
        <package name="com.young.bean"/>

    </typeAliases>

    <!--
        4.typeHandlers: 类型处理器
                负责java类型与数据库字段类型的相互转换.
            java String   to  DB  char/varchar
            DB int  to  java int /Integer

            JSR:  Java Specification Requests  java规范提案
            JSR310：时间日期规范.
                    Date Calendar(历法  GregorianCalendar) long
                    jdk1.8以前  时间日期处理类库不丰富
                    jdk1.8以后  实现了JSR310标准 ,添加了更丰富的时间日期类库.

                    Mybatis低版本没有加入JSR310标准的类型处理器,需要通过typeHandlers手动注册.
                    MyBatis3.4以后已经自带了,不需要手动注册。
     -->
    <!--
        5.plugins:插件.
                 用于拦截Mybatis 4大对象的方法的执行过程,达到动态改变MyBatis的默认行为.
            Executor: 执行器 .  完成增删改查操作.
            ParameterHandler:参数处理器   完成sql语句参数的处理
            ResuletSetHandler:结果集处理器  完成将查出的数据封装成java对象.
            StatementHandler:sql语句处理器  完成sql语句的编译、预编译等.

                将来会讲解一个分页插件.
     -->

    <!--
        6.environments: 环境的配置. 可以同时配置多个环境. 通过default来执行具体使用的环境.
            environment:具体的环境. 必须包含两个子标签
                transactionManager: 事务管理器.
                    type:指定事务管理器的类型.
                        JDBC: JdbcTransactionFactory
                        MANAGED:ManagedTransactionFactory
                        自定义事务管理器，只需要实现TransactionFactory接口，type指定为全类名.
                        最终: 事务管理交给Spring进行管理.==>声明式事务管理.

                dataSource: 数据源.
                    type: 配置数据源的类型.
                        UNPOOLED:不使用连接池 UnpooledDataSourceFactory
                        POOLED:使用连接池   PooledDataSourceFactory
                        JNDI:从web服务器(Tomcat)中获取数据源.  JndiDataSourceFactory

                        最终:交给Spring管理.

     -->
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor"></plugin>
    </plugins>
    <environments default="mysql">
        <environment id="mysql">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

        <environment id="oracle">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="POOLED">
                <property name="driver" value="${orcl.driver}"/>
                <property name="url" value="${orcl.url}"/>
                <property name="username" value="${orcl.username}"/>
                <property name="password" value="${orcl.password}"/>
            </dataSource>
        </environment>


    </environments>

    <!--
        7.databaseIdProvider: MyBatis用来支持多数据库厂商.
             简单理解就是Mybatis根据不同的数据库厂商，执行不同的sql语句.

          property:
              name:数据库的标识号  Connection.getMetaData().getDatabaseProductName();
              value:起的别名

     -->

    <databaseIdProvider type="DB_VENDOR">
        <!-- 配置多个数据库， 相当于给每个数据库起个别名， 将来在sql语句上指定起好的别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!--
        8.mappers: 引入sql映射文件
            mapper: 注册一个sql映射文件
               resource: 引入类路径下的sql映射文件
               url:引入网络路径或者磁盘路径下的sql映射文件
               class:直接引入接口
                       1.如果有对应的sql映射文件,sql映射文件名必须和接口同名,并且必须在同一个目录下.
                       2.没有sql文件,基于注解来配置sql语句的映射.所有的sql都用注解写在接口的方法上.
            package: 批量引入sql映射文件
                      要求sql映射文件的名字与接口名同名，必须在同一个目录下.
     -->
    <mappers>
        <!-- <mapper class="com.atguigu.mybabean.dao.EmployeeMapper"/> -->
        <package name="com.young.mapper"/>
    </mappers>
</configuration>